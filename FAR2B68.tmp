# Docker Compose

- `docker compose up` - create infrastructure
- `docker compose down` - recreate containers
    - `docker compose down -v` - delete all with volumes

# Kafka

## Kafka UI

- `http://localhost:9080/` - admin console

# Kafka CLI

- `docker exec -it kafka bash`

## Check available topics

This can be used to verify that Kafka is working. If everything is OK ‚Äî output will be either empty or show a list of topics.

- `docker exec kafka kafka-topics --bootstrap-server localhost:9092 --list`
    - `docker exec kafka kafka-topics --bootstrap-server kafka:9092 --list` - specify broker name in docker-compose network

-

`docker exec kafka kafka-console-consumer --bootstrap-server localhost:9092 --topic profile.events --from-beginning --property print.headers=true`
-

- `docker exec kafka kafkacat -b localhost:9092 -t profile.events -C -J`

## Create topic

-

`docker exec kafka kafka-topics --bootstrap-server kafka:9092 --create --topic my-topic --partitions 3 --replication-factor 1`

## Describe topic

- `docker exec kafka kafka-topics --bootstrap-server kafka:9092 --describe --topic profile.events`

## Send message (producer)

- `docker exec -i kafka kafka-console-producer --broker-list kafka:9092 --topic my-topic` - you can input strings ‚Äî they will go to the topic

- Read messages (consumer)

-

`docker exec kafka kafka-console-consumer --bootstrap-server localhost:9092 --topic profile.events --from-beginning`

## Other

- `docker exec kafka kafka-broker-api-versions --bootstrap-server localhost:9092` - check that Kafka properly advertises addresses

## Topic cleanup

### Delete and recreate topic (simple and reliable way)

- `docker exec kafka kafka-topics --bootstrap-server kafka:9092 --delete --topic my-topic`
-

`docker exec kafka kafka-topics --bootstrap-server kafka:9092 --create --topic my-topic --partitions 3 --replication-factor 1`

# Kafka Connect

- `docker exec -it connect bash`
- http://localhost:8083/connectors

# Redis

## Connect to Redis

- `docker exec -it redis redis-cli`

## Commands

### Working with keys

- `KEYS *` - 1, if key exists. otherwise 0. ‚ùó Can be very slow with large number of keys - for debugging only!
- `EXISTS foo` - 1, if key exists. otherwise 0.
- `DEL foo` - delete key, returns 1 if existed and deleted. if didn't exist, then 0.
- `TYPE foo` - what is stored in the key (string in example)

### Working with strings

üëâ Redis works with strings by default.

- `SET foo "Bar"` - save value by key
    - `SET city "Minsk"`
- `GET foo` - get value by key. if doesn't exist, returns (nil)

### Working with lists (LIST)

üëâ Redis list is an **ordered** collection of strings (analog of queue/stack).

#### `LLEN` - List length

- `LLEN tasks` - if list doesn't exist, then 0

#### `LRANGE` - Get elements from range

- `LRANGE tasks 0 -1` - will output entire list

#### Adding to list

##### `LPUSH` - add to **beginning** of list

üëâ List grows to the left with `LPUSH`.

- `LPUSH tasks "learn Redis"` - returns list length after adding
  - `LPUSH tasks "write code"`
    - `LRANGE tasks 0 1` - will output 'write code', 'learn Redis'
    
##### `RPUSH` - add to **end** of list

üëâ List grows to the right with `RPUSH`.

- `RPUSH greeting "Hello" "World!"`
- `LRANGE tasks 0 -1` - will output 'Hello', 'World!' 

##### `LTRIM` - limit list length.

üëâ Allows to keep only specified range of elements in the list, cutting everything else.

- `DEL recent_logs`
- `RPUSH recent_logs "msg1" "msg2" "msg3" "msg4" "msg5"`
- `LRANGE recent_logs 0 -1`
  - `LTRIM recent_logs -3 -1` - keep only last 3 (need to do this every time after adding)
  - `LRANGE recent_logs 0 -1` 

#### Removing from list

##### `LPOP` - Remove and return from **beginning**.

üëâ List shrinks from the left with `LPOP`.

- `RPUSH colors "red"`
  - `RPUSH colors "green"`
  - `RPUSH colors "blue"`
  - `LRANGE colors 0 -1` - returns red, green and blue
- `LPOP colors` - returns red
  - `LRANGE colors 0 -1` - returns green and blue

##### `RPOP` - Remove and return from **end**.

üëâ List shrinks from the right with `RPOP`.

- `RPUSH nambers "one"`
  - `RPUSH nambers "two"`
  - `RPUSH nambers "three"`
  - `LRANGE nambers 0 -1` - returns one, two and three
- `RPOP nambers` - returns three
  - `LRANGE nambers 0 -1` - returns one, two


### Setting TTL (key time to live)

- `SET temp "I will expire"`
- `EXPIRE temp 10` - set time to live (in seconds)
    - `EXPIRE city 30`
        - `EXPIRE city 10` - read value and immediately manually extend TTL
- `TTL temp` - how much time is left. -1: key exists, but without TTL, -2: key doesn't exist at all.
    - `TTL city`

# Keycloak

> **Version**: 26.3.2+ (quay.io/keycloak/keycloak:26.3.2)

## Create database

üëâ Database is available in Docker

- `docker exec -it postgres bash`
  - `docker exec -it postgres psql -U postgres`

### Scripts

- `docker cp keycloak/. postgres:/tmp` - copy scripts into container
- `docker exec -it postgres psql -U postgres -f /tmp/drop-db.sql` - drop db
- `docker exec -it postgres psql -U postgres -f /tmp/create-db.sql` - create db

## Web access

### First login

- http://localhost:8880
- bootstrap/bootstrap

#### Create a permanent admin

- Login as bootstrap/bootstrap
- Go to Realm: master
- Go to Users
- Create user: 
  - Username: admin
  - Email, First name, Last name ‚Äî optional
  - Enabled: ‚úÖ
- Go to Credentials tab ‚Üí set password
  - Temporary: ‚ùå OFF
- Go to Role Mappings tab
  - In Assign role list select Realm roles
    - Assign roles:
      - or admin if you want full access
      - realm-admin (sufficient for administration) ???

#### Create ms-realm

1. Login to Keycloak admin panel (http://localhost:8880)
2. Login as admin (created above)
3. In realm dropdown (top left) select **Create realm**
4. Specify:
   - **Realm name**: `ms-realm`
   - **Enabled**: ‚úÖ ON
5. Click **Create**
6. Now switch to `ms-realm` realm for further configuration

## User registration setup

### Enable self-registration

1. Login to Keycloak admin panel (http://localhost:8880)
2. Select `ms-realm` realm (switch from master)
3. Go to **Realm Settings** ‚Üí **Login**
4. Enable options:
   - **User registration**: ‚úÖ ON
   - **Email as username**: ‚ùå OFF (so you can login with username)
   - **Login with email**: ‚ùå OFF
   - **Duplicate emails**: ‚úÖ ON (allow duplicate emails)

### Disable email verification

1. In **Realm Settings** ‚Üí **Login**
2. Disable options:
   - **Verify email**: ‚ùå OFF
   - **Login with email**: ‚ùå OFF

### Create user role

1. Go to **Realm Roles**
2. Click **Create role**
3. Specify:
   - **Role name**: `user`
   - **Description**: `Default user role`
4. Save role

### Configure Default Roles

In Keycloak all realm roles are automatically included in the composite role `default-roles-ms-realm`, which is assigned to all new users:

1. **Check composite role:**
   - Go to **Realm Roles**
   - Find role `default-roles-ms-realm`
   - Open it ‚Üí **Composite Roles**
   - Make sure role `user` is included in the composition

2. **If role `user` is not included:**
   - In role `default-roles-ms-realm` ‚Üí **Composite Roles**
   - Click **Add role**
   - Select role `user` ‚Üí **Add selected**

3. Now all new users will automatically get role `user` through `default-roles-ms-realm`

### Configure Login Theme (optional)

1. In **Realm Settings** ‚Üí **Themes**
2. Set **Login theme**: `keycloak` (or other suitable)
3. This will hide email fields from registration form

### Verify setup

1. Open http://localhost:8880/realms/ms-realm/account
2. Click **Register** 
3. Fill only:
   - **Username** (required)
   - **Password** (required)
   - **Confirm password** (required)
4. Email should be optional or absent
5. After registration user will be able to login with username without email verification

## Access to ms-realm

### For users (login/registration)
- **Login**: http://localhost:8880/realms/ms-realm/account
- **Registration**: http://localhost:8880/realms/ms-realm/account (Register button)

### For administrators
- **Admin panel**: http://localhost:8880/admin/master/console/#/ms-realm
- **Login**: admin/admin (user created above)

# Kong

## Web access

- http://localhost:8001/



# Nexus

## Web access

- http://localhost:8081
- admin/admin123
- `docker exec nexus cat /nexus-data/admin.password`

## Commands

- `docker logs nexus`

/nexus-data/admin.password