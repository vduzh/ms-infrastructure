services:
  postgres:
    image: debezium/postgres:15
    container_name: postgres
    restart: always
    ports:
      - "5433:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    # Включить логическую репликацию (logical decoding???)
    command:
      -c wal_level=logical
      -c max_wal_senders=3
      -c max_replication_slots=3
      -c max_connections=50
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - ms-network

  # Apache Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.0
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000 #2 sec
    healthcheck:
      test: ["CMD", "echo", "ruok", "|", "nc", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ms-network

  kafka:
    image: confluentinc/cp-kafka:7.6.0
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: INTERNAL://kafka:29092,EXTERNAL://0.0.0.0:9092 # Kafka будет слушать на двух адресах
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:29092,EXTERNAL://localhost:9092 # Что Kafka будет рекламировать клиентам
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT # Маппинг протоколов
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL # Используется для связи между брокерами (если у вас их несколько)
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: [ "CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list" ]
      interval: 10s
      timeout: 10s
      retries: 10
    networks:
      - ms-network

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "9080:8080"
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092 # 9092
    networks:
      - ms-network

  connect:
#    image: confluentinc/cp-kafka-connect:7.6.0
    image: debezium/connect:2.7.3.Final
    container_name: connect
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
    ports:
      - "8083:8083"
    environment:
      BOOTSTRAP_SERVERS: kafka:29092
      REST_ADVERTISED_HOST_NAME: connect
      GROUP_ID: connect-cluster
      CONFIG_STORAGE_TOPIC: _connect-configs
      OFFSET_STORAGE_TOPIC: _connect-offsets
      STATUS_STORAGE_TOPIC: _connect-status
      KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      VALUE_CONVERTER_SCHEMAS_ENABLE: "false"
      KEY_CONVERTER_SCHEMAS_ENABLE: "false"
      PLUGIN_PATH: "/usr/share/java,/etc/kafka-connect/jars"
      LOG4J_ROOT_LOGLEVEL: INFO
    networks:
      - ms-network

  redis:
    image: redis:8.0.3
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    restart: unless-stopped
    networks:
      - ms-network

  keycloak:
    image: quay.io/keycloak/keycloak:26.3.2
    container_name: keycloak
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
    command: start-dev
    ports:
      - "8880:8080"
    environment:
      KC_BOOTSTRAP_ADMIN_USERNAME: bootstrap
      KC_BOOTSTRAP_ADMIN_PASSWORD: bootstrap
      # Подключение к Postgres
      KC_DB: postgres
      KC_DB_URL_HOST: postgres
      KC_DB_URL_PORT: 5432
      KC_DB_URL_DATABASE: keycloak
      KC_DB_SCHEMA: keycloak
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: keycloak
      KC_LOG_LEVEL: INFO # DEBUG
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health/ready"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - ms-network

  api-gateway:
    image: nginx:latest
    container_name: api-gateway
    ports:
      - "9999:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
#    depends_on:
#      - profiles
#      - cards
    networks:
      - ms-network

#  kong-migrations:
#    image: kong:3.6
#    container_name: kong-migrations
#    depends_on:
#      postgres:
#        condition: service_healthy
#    environment:
#      KONG_DATABASE: postgres
#      KONG_PG_HOST: postgres
#      KONG_PG_PORT: 5432
#      KONG_PG_USER: postgres
#      KONG_PG_PASSWORD: postgres
#      KONG_PG_DATABASE: postgres
#      KONG_PG_SCHEMA: kong
#    entrypoint: /bin/sh
#    command:
#      - -c
#      - |
#        kong migrations bootstrap && \
#        kong migrations up && \
#        touch /tmp/migrations-done && \
#        echo "Migrations completed successfully" && \
#        tail -f /dev/null
#    healthcheck:
#      test: ["CMD-SHELL", "test -f /tmp/migrations-done"]
#      interval: 5s
#      retries: 10
#      timeout: 3s
#      start_period: 30s
#    restart: "no"
#    networks:
#      - ms-network

#  kong:
#    image: kong:3.6
#    container_name: kong
#    depends_on:
#      kong-migrations:
#        condition: service_healthy
#    environment:
#      KONG_DATABASE: postgres
#      KONG_PG_HOST: postgres
#      KONG_PG_PORT: 5432
#      KONG_PG_USER: postgres
#      KONG_PG_PASSWORD: postgres
#      KONG_PG_DATABASE: postgres
#      KONG_PG_SCHEMA: kong
#      KONG_PROXY_ACCESS_LOG: /dev/stdout
#      KONG_ADMIN_ACCESS_LOG: /dev/stdout
#      KONG_PROXY_ERROR_LOG: /dev/stderr
#      KONG_ADMIN_ERROR_LOG: /dev/stderr
#      KONG_ADMIN_LISTEN: 0.0.0.0:8001
#    ports:
#      - "8000:8000" # Public API Gateway
#      - "8001:8001" # Admin API
#    networks:
#      - ms-network
#


  nexus:
    image: sonatype/nexus3:latest
    container_name: nexus
    ports:
      - "8081:8081" # Порт для доступа к Nexus UI и репозиториям
    volumes:
      - nexus-data:/nexus-data # Сохраняем данные Nexus, чтобы они не терялись при перезапуске
    environment:
      # Увеличьте лимит памяти, если у вас большой объем данных или много пользователей
    #  - NEXUS_HEAP_OPTS="-Xmx1024m -Xms1024m"
      # Добавляем этот параметр для предотвращения раннего закрытия базы данных H2
      - NEXUS_JAVA_OPTS="-Djdbc.h2.DB_CLOSE_ON_EXIT=FALSE"
    restart: always
    networks:
      - ms-network

volumes:
  pgdata:
  nexus-data:
  redis-data:
  keycloak_data:

networks:
  ms-network:
    name: ms-network
    driver: bridge